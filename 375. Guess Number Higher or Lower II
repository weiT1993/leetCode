```

public class Solution {
    public int getMoneyAmount(int n) {
        HashMap<Integer[],Integer> rangeMoney = new HashMap<Integer[],Integer>();
		return getMoneyAmount(1,n,rangeMoney);
    }
    
    public boolean containsKeyArray(HashMap<Integer[],Integer> rangeMoney,Integer[] array){
		for(Integer[] key : rangeMoney.keySet()){
			if(array[0]==key[0] && array[1]==key[1]){
				return true;
			}
		}
		return false;
	}
	
	public int rangeMoneyGet(HashMap<Integer[],Integer> rangeMoney,Integer[] array){
		for(Integer[] key : rangeMoney.keySet()){
			if(array[0]==key[0] && array[1]==key[1]){
				return rangeMoney.get(key);
			}
		}
		return -1;
	}
	
	public int getMoneyAmount(int lo, int hi, HashMap<Integer[],Integer> rangeMoney){
		//System.out.printf("Looking at %d to %d\n",lo,hi);
		if(hi-lo<=0){
			return 0;
		}
		if(hi-lo+1==2){
		    return lo;
		}
		if(hi-lo+1==3){
		    return lo+1;
		}
		Integer[] array = {lo,hi};
		if(containsKeyArray(rangeMoney,array)){
			//System.out.printf("Has %d-%d $%d in map\n", array[0],array[1],rangeMoneyGet(rangeMoney,array));
			return rangeMoneyGet(rangeMoney,array);
		}
		int minMoney = Integer.MAX_VALUE;
		int delta = 2*hi*hi+2*lo*lo+1-2*lo+2*hi;
		int guessFrom = (int) (-1+Math.sqrt(delta))/2-1;
		// System.out.printf("guessFrom = %d\n",guessFrom);
		for(int i=guessFrom;i<=hi;i++){
			//System.out.printf("Guess %d, left = %d to %d, right = %d to %d\n",i,lo,i-1,i+1,hi);
			int candidateLo = i+getMoneyAmount(lo,i-1,rangeMoney);
			int candidateHi = i+getMoneyAmount(i+1,hi,rangeMoney);
			int candidate;
			if(candidateLo<candidateHi){
				candidate = candidateHi;
			}
			else{
				candidate = candidateLo;
			}
			//System.out.printf("Candidate for %d-%d, guess %d first = %d\n",lo,hi,i,candidate);
			if(candidate<minMoney){
				minMoney = candidate;
			}
		}
		rangeMoney.put(array, minMoney);
		//System.out.printf("Putting %d-%d $%d into map\n", array[0],array[1],minMoney);
		return minMoney;
	}
}

```
